#!/bin/bash

cmd=$1
if [ $# = 3 ]
then
  ssid=$2
  pwd=$3
fi

script=$(basename $0)
folder=$(dirname $0)
cd $folder

# URL for tplink cloud services server
tplinkURL="https://wap.tplinkcloud.com/"
# UUID generated on https://www.uuidgenerator.net/version4
terminalUUID="701c7cd8-80d9-4dda-916c-738a9689e9c7"
# Kasa account credentials
cloudUserName="jordi.monfar@gmail.com"
cloudPassword="3trancos"

# How to get the Token: http://itnerd.space/2017/06/19/how-to-authenticate-to-tp-link-cloud-api/
# for normal command execution, token must be already generated and stored in $tokenfile

tokenfile=${script/.sh/.token}

if [ -f $tokenfile ]
then
  # tokens expire in one month
  # let's play safe, and if token is older than one week (604800 seconds) regenerate it
  if [ $(($(date +%s)-$(date -r $tokenfile +%s))) -gt 604800 ]
  then
    rm $tokenfile
    sh ./$script get_token
  fi
  Token=$(cat $tokenfile)
else
  # token file is missing, so create it
  if [ "$cmd" != get_token ]
  then
    # check required to avoid infinite recursive loop
	# create token and use it
	sh ./$script get_token
    Token=$(cat $tokenfile)
  fi
fi
 
# How to get parameters (from http://itnerd.space/2017/01/22/how-to-control-your-tp-link-hs100-smartplug-from-internet/)

# adb devices
# adb backup -f backup.ab com.tplink.kasa_android
# dd if=backup.ab bs=1 skip=24 | python -c "import zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" | tar -xvf -
# cd apps/com.tplink.kasa_android

## Section to get Token removed as obsolete: see above for current method
## apt-get install sqlite3 #if required
## sqlite3 db/iot.1.db "select token from accounts;"
## Token="fd9d51c7-cdd9abd5be5545c4afc068c" # expired April 21, 2017
## Token="fd9d51c7-1731bfe70aa64871bd411e2" # expired May 21, 2017
## Token="fd9d51c7-6ca4e0fa523e4669bffc055" # expired Jun 21, 2017
## Token="fd9d51c7-5c6b6b1c2ea744149ecc40b"

# sqlite3 db/iot.1.db "select deviceAlias,deviceID from devices;"
# deviceID="FMG Smart Plug 1|8006E6EDC0696B7B38D61832B4A8F12E171E66D7"
deviceID="8006E6EDC0696B7B38D61832B4A8F12E171E66D7"

# cat f/INSTALLATION
termid="278960c6-d86d-438d-82a7-fa0b809ef575"

# Commands available and syntax taken from https://www.softscheck.com/en/reverse-engineering-tp-link-hs110/

# tools

check_dependencies() {
  command -v curl >/dev/null 2>&1 || { echo >&2 "The curl programme for sending data over the network isn't in the path, communication with the plug will fail"; exit 2; }
 }

show_usage() {
  echo Usage: $0 COMMAND
  echo where COMMAND is one of on/off/get_sysinfo/get_token/get_scaninfo/set_stainfo
  exit 1
}

check_arguments() {
   check_arg() {
    name="$1"
    value="$2"
    if [ -z "$value" ]; then
       echo "missing argument $name"
       show_usage
    fi
   }

   check_arg "command" $cmd
   if [ $cmd = set_stainfo ]
   then
     check_arg ssid $ssid
	 check_arg pwd $pwd
   fi
}

send_to_switch_no_token () {
   data="${1}"
#  echo ${data}
   
   curl -sS --request POST "${tplinkURL} HTTP/1.1" \
   --data "${data}" \
   --header "Content-Type: application/json" && echo || echo couldn''t connect, curl failed with exit code $?
}

send_to_switch () {
   data="${1}"
   echo ${data}
   
   curl -sS --request POST "${tplinkURL}?token=${Token} HTTP/1.1" \
   --data "${data}" \
   --header "Content-Type: application/json" && echo || echo couldn''t connect, curl failed with exit code $?
}

##
#  Main programme
##

check_dependencies
check_arguments

case "$cmd" in
  on)
     send_to_switch '{"method":"passthrough", "params": {"deviceId": "'${deviceID}'", "requestData": "{\"system\":{\"set_relay_state\":{\"state\":1}}}" }}'
     ;;
  off)
     send_to_switch '{"method":"passthrough", "params": {"deviceId": "'${deviceID}'", "requestData": "{\"system\":{\"set_relay_state\":{\"state\":0}}}" }}'
     ;;
  get_sysinfo)
     send_to_switch '{"method":"passthrough", "params": {"deviceId": "'${deviceID}'", "requestData": "{\"system\":{\"get_sysinfo\":{}}}" }}'
     ;;
  get_token)
     # Token is generated by user/password login and stored in $tokenfile in same folder as $script
	 # format of request reply:
	 # {"error_code":0,"result":{"accountId":"699052","regTime":"2016-12-25 21:32:10","email":"jordi.monfar@gmail.com","token":"fd9d51c7-ff91bdb4cffc4e2092fad10"}}
     # order of results is NOT guaranteed, observed that sometimes email comes before or after token
     # it is safer to parse result by tag name than by position
     echo "Generating token and storing it in $tokenfile"
	 send_to_switch_no_token '{"method":"login", "params": {"appType":"Kasa_Android", "cloudUserName":"'${cloudUserName}'", "cloudPassword":"'${cloudPassword}'", "terminalUUID":"'${terminalUUID}'"}}' | tr '{},' '\n' | grep token.: | cut -d '"' -f4 | tee $tokenfile
     ;;
  get_scaninfo)
     send_to_switch '{"method":"passthrough", "params": {"deviceId": "'${deviceID}'", "requestData": "{\"netif\":{\"get_scaninfo\":{\"refresh\":1}}}" }}'
	 ;;
  set_stainfo)
     send_to_switch '{"method":"passthrough", "params": {"deviceId": "'${deviceID}'", "requestData": "{\"netif\":{\"set_stainfo\":{\"ssid\":\"'${ssid}'\",\"password\":\"'${pwd}'\",\"key_type\":3}}}" }}'
	 ;;  
  *)
     show_usage
     ;;
esac
